import os
import logging
import sqlite3
import subprocess
import sys
from aiogram import Router, types
from aiogram.filters import Command
from config.settings import ADMIN_ID, DB_PATH

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
router = Router()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
async def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏—ë–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_occupied_appointments():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            conn.row_factory = sqlite3.Row  # –î–æ—Å—Ç—É–ø –∫ —Å—Ç–æ–ª–±—Ü–∞–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            cursor = conn.cursor()
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞, –≤—Ä–∞—á–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
            cursor.execute("""
                SELECT 
                    a.id,
                    u.first_name || ' ' || u.last_name as patient_name,
                    a.doctor as doctor_name,
                    a.day || ' ' || a.time as appointment_time
                FROM appointments a
                JOIN users u ON a.user_id = u.user_id
                ORDER BY a.day, a.time
            """)
            return cursor.fetchall()
    except sqlite3.Error as e:
        logging.error(f"Database error in get_occupied_appointments: {e}")
        raise

# –ö–æ–º–∞–Ω–¥–∞: /–∑–∞–Ω—è—Ç—ã–µ_–∑–∞–ø–∏—Å–∏ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
@router.message(Command("–∑–∞–Ω—è—Ç—ã–µ_–∑–∞–ø–∏—Å–∏"))
async def show_occupied_appointments(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        appointments = get_occupied_appointments()
        if not appointments:
            await message.answer("üìÖ –ù–µ—Ç –∑–∞–Ω—è—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        response = "üìã –ó–∞–Ω—è—Ç—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
        for app in appointments:
            response += (
                f"üÜî ID: {app['id']}\n"
                f"üë§ –ü–∞—Ü–∏–µ–Ω—Ç: {app['patient_name']}\n"
                f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {app['doctor_name']}\n"
                f"üïí –í—Ä–µ–º—è: {app['appointment_time']}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –±–æ–ª—å—à–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤
        if len(response) > 4000:
            parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
            for part in parts:
                await message.answer(part)
        else:
            await message.answer(response)
            
    except Exception as e:
        logging.error(f"Error in /–∑–∞–Ω—è—Ç—ã–µ_–∑–∞–ø–∏—Å–∏: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π.\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.")

# –ö–æ–º–∞–Ω–¥–∞: /–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@router.message(Command("–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"))
async def restart_bot(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        await message.answer("üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ Python-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞
        python = sys.executable
        args = sys.argv

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å (–∑–∞–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–æ–≤—ã–º)
        os.execl(python, python, *args)
        
    except Exception as e:
        logging.error(f"Restart error: {e}", exc_info=True)
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# –ö–æ–º–∞–Ω–¥–∞: /–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞)
@router.message(Command("–æ—Å—Ç–∞–Ω–æ–≤–∫–∞"))
async def stop_bot(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        await message.answer("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
        from aiogram.enums import ChatAction
        await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å (–∫–æ–¥ 0 ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
        os._exit(0)
        
    except Exception as e:
        logging.error(f"Stop error: {e}", exc_info=True)
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")

# –ö–æ–º–∞–Ω–¥–∞: /–ª–æ–≥–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
@router.message(Command("–ª–æ–≥–∏"))
async def get_logs(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        log_file = "bot.log"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ª–æ–≥–æ–≤
        if not os.path.exists(log_file):
            await message.answer("üìÅ –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥-—Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        await message.answer_document(types.FSInputFile(log_file))
        
    except Exception as e:
        logging.error(f"Logs error: {e}", exc_info=True)
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
