from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import logging
from contextlib import closing
from config.settings import WORK_HOURS, WORK_MINUTES

def days_keyboard(week_manager=None):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏"""
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
    buttons = []
    
    for day in days:
        if week_manager and hasattr(week_manager, 'is_day_available') and not week_manager.is_day_available(day):
            buttons.append([InlineKeyboardButton(
                text=f"‚ùå {day} (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)",
                callback_data="day_unavailable"
            )])
        else:
            buttons.append([InlineKeyboardButton(
                text=f"üìÖ {day}",
                callback_data=f"day_{day}"
            )])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def times_keyboard(day: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å 30-–º–∏–Ω—É—Ç–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏"""
    buttons = []
    try:
        with closing(sqlite3.connect('clinic.db')) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT time FROM appointments WHERE day=?", (day,))
            busy_times = {row[0] for row in cursor.fetchall()}
            
            for hour in WORK_HOURS:
                for minute in WORK_MINUTES:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º 13:30 –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ
                    if hour == 13 and minute == '30':
                        continue
                        
                    time_str = f"{hour}:{minute}"
                    status = "‚õî –∑–∞–Ω—è—Ç–æ" if time_str in busy_times else "üïí"
                    buttons.append([
                        InlineKeyboardButton(
                            text=f"{status} {time_str}",
                            callback_data=f"time_{time_str}"
                        )
                    ])
    except sqlite3.Error as e:
        logging.error(f"Database error: {e}")
        # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ª–æ—Ç–∞–º
        for hour in WORK_HOURS:
            time_str = f"{hour}:00"
            buttons.append([
                InlineKeyboardButton(text=time_str, callback_data=f"time_{time_str}")
            ])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_days")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def doctor_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–∞—á–∞"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üë©‚Äç‚öïÔ∏è –ü–µ–¥–∏–∞—Ç—Ä", callback_data="doctor_pediatrician"),
                InlineKeyboardButton(text="üë®‚Äç‚öïÔ∏è –•–∏—Ä—É—Ä–≥", callback_data="doctor_surgeon")
            ],
            [
                InlineKeyboardButton(text="üë©‚Äç‚öïÔ∏è –ì–∏–Ω–µ–∫–æ–ª–æ–≥", callback_data="doctor_gynecologist")
            ]
        ]
    )

def confirm_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
            ]
        ]
    )
