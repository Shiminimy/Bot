# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π –∏–∑ Aiogram –∏ –¥—Ä—É–≥–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext  # –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.fsm.state import State, StatesGroup  # –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup  # –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
from config.settings import WORK_HOURS, WORK_MINUTES  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
from keyboard.appointment import (  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–ø–∏—Å–∏
    days_keyboard,
    times_keyboard,
    doctor_keyboard,
    confirm_keyboard
)
from models.user import save_user  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from models.appointment import save_appointment  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
import logging
import sqlite3
from contextlib import closing  # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ë–î

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º
def create_appointment_router(week_manager=None):
    router = Router()

    # –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
    class AppointmentStates(StatesGroup):
        waiting_for_name = State()
        waiting_for_day = State()
        waiting_for_time = State()
        waiting_for_doctor = State()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º" —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
    @router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º")
    async def start_appointment_text(message: types.Message, state: FSMContext):
        try:
            await state.set_state(AppointmentStates.waiting_for_name)
            await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        except Exception as e:
            logging.error(f"Error in start_appointment_text: {e}")
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º"
    @router.callback_query(F.data == "sign_up")
    async def start_appointment_callback(callback: types.CallbackQuery, state: FSMContext):
        try:
            await state.set_state(AppointmentStates.waiting_for_name)
            await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
            await callback.answer()
        except Exception as e:
            logging.error(f"Error in start_appointment_callback: {e}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–ø–∏—Å–∏", show_alert=True)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    @router.message(AppointmentStates.waiting_for_name)
    async def process_name(message: types.Message, state: FSMContext):
        try:
            first_name, last_name = message.text.strip().split(maxsplit=1)
            await state.update_data(
                first_name=first_name,
                last_name=last_name,
                user_id=message.from_user.id
            )

            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                save_user(message.from_user.id, first_name, last_name)
                await state.set_state(AppointmentStates.waiting_for_day)
                await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=days_keyboard(week_manager))
            except sqlite3.IntegrityError:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                await state.set_state(AppointmentStates.waiting_for_day)
                await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=days_keyboard(week_manager))
            except sqlite3.Error as e:
                logging.error(f"Database error: {e}")
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await state.clear()

        except ValueError:
            await message.answer("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª.\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤")
        except Exception as e:
            logging.error(f"Unexpected error: {e}")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.")
            await state.clear()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    @router.callback_query(F.data.startswith("day_"), AppointmentStates.waiting_for_day)
    async def process_day(callback: types.CallbackQuery, state: FSMContext):
        try:
            day = callback.data.split("_")[1]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏
            if week_manager and hasattr(week_manager, 'is_day_available'):
                if not week_manager.is_day_available(day):
                    await callback.answer("‚ùå –≠—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –ø—Ä–æ—à–µ–ª! –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞.", show_alert=True)
                    return

            await state.update_data(day=day)
            await state.set_state(AppointmentStates.waiting_for_doctor)
            await callback.message.edit_text(f"üìÖ –í—ã–±—Ä–∞–Ω –¥–µ–Ω—å: {day}\n\nüë®‚Äç‚öïÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞:", reply_markup=doctor_keyboard())
        except Exception as e:
            logging.error(f"Error in process_day: {e}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–Ω—è", show_alert=True)
        finally:
            await callback.answer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–∞—á–∞
    @router.callback_query(F.data.startswith("doctor_"), AppointmentStates.waiting_for_doctor)
    async def process_doctor(callback: types.CallbackQuery, state: FSMContext):
        try:
            doctor = callback.data.split("_")[1]
            await state.update_data(doctor=doctor)
            data = await state.get_data()

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –∏–∑ –ë–î
            with closing(sqlite3.connect('clinic.db')) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT time FROM appointments WHERE doctor=? AND day=?", (doctor, data['day']))
                busy_times = {row[0] for row in cursor.fetchall()}

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
            buttons = []
            for hour in WORK_HOURS:
                for minute in WORK_MINUTES:
                    time_str = f"{hour}:{minute}"
                    status = "‚õî –∑–∞–Ω—è—Ç–æ" if time_str in busy_times else "üïí"
                    buttons.append([
                        InlineKeyboardButton(
                            text=f"{status} {time_str}",
                            callback_data=f"time_{time_str}_{doctor}"
                        )
                    ])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            buttons.append([
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—Ä–∞—á–∞–º", callback_data="back_to_doctors")
            ])
            buttons.append([
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–Ω—è–º", callback_data="back_to_days")
            ])

            await callback.message.edit_text(
                f"üìÖ –î–µ–Ω—å: {data.get('day', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\nüë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctor}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
            await state.set_state(AppointmentStates.waiting_for_time)
        except Exception as e:
            logging.error(f"Error in process_doctor: {e}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–∞—á–∞", show_alert=True)
        finally:
            await callback.answer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    @router.callback_query(F.data.startswith("time_"), AppointmentStates.waiting_for_time)
    async def process_time(callback: types.CallbackQuery, state: FSMContext):
        try:
            time, doctor = callback.data.split("_")[1:3]
            await state.update_data(time=time, doctor=doctor)
            data = await state.get_data()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
            with closing(sqlite3.connect('clinic.db')) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT 1 FROM appointments WHERE day=? AND time=? AND doctor=?", (data['day'], time, doctor))
                if cursor.fetchone():
                    await callback.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–∞—á–∞.", show_alert=True)
                    return

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            await callback.message.edit_text(
                "üîç –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n\n"
                f"üìÖ –î–µ–Ω—å: {data.get('day', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üïí –í—Ä–µ–º—è: {time}\n"
                f"üë§ –ü–∞—Ü–∏–µ–Ω—Ç: {data.get('first_name', '')} {data.get('last_name', '')}\n"
                f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctor}",
                reply_markup=confirm_keyboard()
            )
            await state.set_state(AppointmentStates.waiting_for_doctor)
        except Exception as e:
            logging.error(f"Error in process_time: {e}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏", show_alert=True)
        finally:
            await callback.answer()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    @router.callback_query(F.data == "confirm", AppointmentStates.waiting_for_doctor)
    async def confirm_appointment(callback: types.CallbackQuery, state: FSMContext):
        try:
            data = await state.get_data()
            save_appointment(
                user_id=data['user_id'],
                day=data['day'],
                time=data['time'],
                doctor=data['doctor']
            )

            await callback.message.edit_text(
                "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"üìÖ –î–µ–Ω—å: {data['day']}\n"
                f"üïí –í—Ä–µ–º—è: {data['time']}\n"
                f"üë§ –ü–∞—Ü–∏–µ–Ω—Ç: {data['first_name']} {data['last_name']}\n"
                f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {data['doctor']}\n\n"
                "–ú—ã –∂–¥–µ–º –≤–∞—Å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!"
            )
        except Exception as e:
            logging.error(f"Error in confirm_appointment: {e}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏", show_alert=True)
        finally:
            await state.clear()
            await callback.answer()

    # –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    @router.callback_query(F.data == "cancel", AppointmentStates.waiting_for_doctor)
    async def cancel_appointment(callback: types.CallbackQuery, state: FSMContext):
        try:
            data = await state.get_data()
            await callback.message.edit_text(
                f"‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑, {data.get('first_name', '')}!"
            )
        except Exception as e:
            logging.error(f"Error in cancel_appointment: {e}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏", show_alert=True)
        finally:
            await state.clear()
            await callback.answer()

    # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —à–∞–≥ –≤—ã–±–æ—Ä–∞ –≤—Ä–∞—á–∞
    @router.callback_query(F.data == "back_to_doctors", AppointmentStates.waiting_for_time)
    async def back_to_doctors(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        await state.set_state(AppointmentStates.waiting_for_doctor)
        await callback.message.edit_text(
            f"üìÖ –î–µ–Ω—å: {data.get('day', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\nüë®‚Äç‚öïÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞:",
            reply_markup=doctor_keyboard()
        )
        await callback.answer()

    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è
    @router.callback_query(F.data == "back_to_days", AppointmentStates.waiting_for_doctor)
    async def back_to_days(callback: types.CallbackQuery, state: FSMContext):
        await state.set_state(AppointmentStates.waiting_for_day)
        await callback.message.edit_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
            reply_markup=days_keyboard(week_manager)
        )
        await callback.answer()

    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏
    @router.callback_query(F.data == "back_to_name", AppointmentStates.waiting_for_day)
    async def back_to_name(callback: types.CallbackQuery, state: FSMContext):
        await state.set_state(AppointmentStates.waiting_for_name)
        await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        await callback.answer()

    return router
