from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config.settings import DOCTORS
import logging

router = Router()

class ConsultationStates(StatesGroup):
    waiting_for_doctor = State()
    waiting_for_fullname = State()
    waiting_for_question = State()
    waiting_for_answer = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–∞—á–∞
def doctors_keyboard():
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üë©‚Äç‚öïÔ∏è –ü–µ–¥–∏–∞—Ç—Ä", callback_data="consult_pediatrician")],
            [types.InlineKeyboardButton(text="üë®‚Äç‚öïÔ∏è –•–∏—Ä—É—Ä–≥", callback_data="consult_surgeon")],
            [types.InlineKeyboardButton(text="üë©‚Äç‚öïÔ∏è –ì–∏–Ω–µ–∫–æ–ª–æ–≥", callback_data="consult_gynecologist")]
        ]
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@router.callback_query(F.data == "consultation")
async def handle_consultation_button(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ConsultationStates.waiting_for_doctor)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:", reply_markup=doctors_keyboard())
    await callback.answer()

# –¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
@router.message(F.text == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
async def start_consultation(message: types.Message, state: FSMContext):
    await state.set_state(ConsultationStates.waiting_for_doctor)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞:", reply_markup=doctors_keyboard())

# –í—ã–±–æ—Ä –≤—Ä–∞—á–∞
@router.callback_query(F.data.startswith("consult_"), ConsultationStates.waiting_for_doctor)
async def select_doctor(callback: types.CallbackQuery, state: FSMContext):
    doctor_type = callback.data.split("_")[1]
    await state.update_data(doctor_type=doctor_type, doctor_id=DOCTORS[doctor_type])
    await state.set_state(ConsultationStates.waiting_for_fullname)
    await callback.message.edit_text("üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
    await callback.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –§–ò–û
@router.message(ConsultationStates.waiting_for_fullname)
async def receive_fullname(message: types.Message, state: FSMContext):
    full_name_input = message.text.strip()
    if not full_name_input or len(full_name_input.split()) < 2:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ **–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é**, –Ω–∞–ø—Ä–∏–º–µ—Ä: `–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤`.")
        return

    username = f"(@{message.from_user.username})" if message.from_user.username else ""
    full_name = f"{full_name_input} {username}"

    await state.update_data(patient_name=full_name, patient_id=message.from_user.id)
    await state.set_state(ConsultationStates.waiting_for_question)
    await message.answer("‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤—Ä–∞—á—É:")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞
@router.message(ConsultationStates.waiting_for_question)
async def process_question(message: types.Message, state: FSMContext):
    data = await state.get_data()

    await state.update_data(question=message.text)

    try:
        await message.bot.send_message(
            chat_id=data['doctor_id'],
            text=f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç {data['patient_name']}:\n\n{message.text}",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="–û—Ç–≤–µ—Ç–∏—Ç—å",
                    callback_data=f"answer_{message.from_user.id}_{data['doctor_type']}"
                )]
            ])
        )
        await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Ä–∞—á—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        await state.clear()
    except Exception as e:
        logging.error(f"Error sending to doctor: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

# –û—Ç–≤–µ—Ç –≤—Ä–∞—á–∞
@router.callback_query(F.data.startswith("answer_"))
async def answer_consultation(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    patient_id = int(parts[1])
    doctor_type = parts[2] if len(parts) > 2 else "–≤—Ä–∞—á"
    await state.update_data(patient_id=patient_id, doctor_type=doctor_type)
    await state.set_state(ConsultationStates.waiting_for_answer)
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç—É:")
    await callback.answer()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç—É
@router.message(ConsultationStates.waiting_for_answer)
async def send_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()

    doctor_labels = {
        "pediatrician": "üë©‚Äç‚öïÔ∏è –ü–µ–¥–∏–∞—Ç—Ä",
        "surgeon": "üë®‚Äç‚öïÔ∏è –•–∏—Ä—É—Ä–≥",
        "gynecologist": "üë©‚Äç‚öïÔ∏è –ì–∏–Ω–µ–∫–æ–ª–æ–≥"
    }
    doctor_label = doctor_labels.get(data.get("doctor_type"), "üë©‚Äç‚öïÔ∏è –í—Ä–∞—á")

    try:
        await message.bot.send_message(
            chat_id=data['patient_id'],
            text=f"{doctor_label} –æ—Ç–≤–µ—Ç–∏–ª(–∞):\n\n{message.text}"
        )
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–∞—Ü–∏–µ–Ω—Ç—É.")
    except Exception as e:
        logging.error(f"Error sending answer: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.")
    finally:
        await state.clear()
