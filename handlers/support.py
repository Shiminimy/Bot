from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config.settings import ADMIN_ID
import logging

router = Router()

class SupportStates(StatesGroup):
    waiting_for_fullname = State()  # –®–∞–≥ –¥–ª—è –≤–≤–æ–¥–∞ –§–ò–û
    waiting_for_support_message = State()  # –®–∞–≥ –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    waiting_for_admin_reply = State()  # –®–∞–≥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞" –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@router.callback_query(F.data == "support")
async def handle_support_button(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SupportStates.waiting_for_fullname)
    await callback.message.edit_text("üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
    await callback.answer()

# –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã "–ø–æ–¥–¥–µ—Ä–∂–∫–∞"
@router.message(F.text.lower() == "–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_text_command(message: types.Message, state: FSMContext):
    await state.set_state(SupportStates.waiting_for_fullname)
    await message.answer("üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
@router.message(SupportStates.waiting_for_fullname)
async def receive_fullname(message: types.Message, state: FSMContext):
    full_name_input = message.text.strip()
    if not full_name_input or len(full_name_input.split()) < 2:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ **–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é**, –Ω–∞–ø—Ä–∏–º–µ—Ä: `–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤`.")
        return

    username = f"(@{message.from_user.username})" if message.from_user.username else ""
    full_name = f"{full_name_input} {username}"

    await state.update_data(
        user_id=message.from_user.id,
        user_name=full_name
    )

    await state.set_state(SupportStates.waiting_for_support_message)
    await message.answer("‚úçÔ∏è –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
@router.message(SupportStates.waiting_for_support_message)
async def receive_support_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    full_name = data.get('user_name')

    try:
        await message.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç {full_name}:\n\n{message.text}",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="–û—Ç–≤–µ—Ç–∏—Ç—å",
                    callback_data=f"reply_{message.from_user.id}"
                )]
            ])
        )
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        await state.clear()
    except Exception as e:
        logging.error(f"Error sending support message to admin: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

# –ê–¥–º–∏–Ω –Ω–∞–∂–∏–º–∞–µ—Ç "–û—Ç–≤–µ—Ç–∏—Ç—å"
@router.callback_query(F.data.startswith("reply_"))
async def admin_reply_button(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[1])
    await state.update_data(reply_user_id=user_id)
    await state.set_state(SupportStates.waiting_for_admin_reply)
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    await callback.answer()

# –ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.message(SupportStates.waiting_for_admin_reply)
async def send_admin_reply(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("reply_user_id")

    try:
        await message.bot.send_message(
            chat_id=user_id,
            text=f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}"
        )
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        logging.error(f"Error sending reply to user: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.")
    finally:
        await state.clear()
