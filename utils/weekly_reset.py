import sqlite3
from datetime import datetime, timedelta
import asyncio
import logging
from aiogram import Bot
from config.settings import ADMIN_ID

class WeekManager:
    def __init__(self):
        self.bot = None
        self.db_path = "clinic.db"
        self.day_map = {
            "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0,
            "–í—Ç–æ—Ä–Ω–∏–∫": 1, 
            "–°—Ä–µ–¥–∞": 2,
            "–ß–µ—Ç–≤–µ—Ä–≥": 3,
            "–ü—è—Ç–Ω–∏—Ü–∞": 4
        }
        self.last_reset_date = None  # –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞

    def init(self, bot: Bot):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞"""
        self.bot = bot
    
    async def schedule_reset(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –≤ —Å—É–±–±–æ—Ç—É –≤ 00:00"""
        while True:
            try:
                now = datetime.now()
                current_date = now.date()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Å—É–±–±–æ—Ç–∞ (5) –∏ —Å–±—Ä–æ—Å –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è
                if now.weekday() == 5 and self.last_reset_date != current_date:
                    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ 00:00
                    time_until_midnight = (now.replace(hour=0, minute=0, second=0, microsecond=0) 
                                         + timedelta(days=1) - now).total_seconds()

                    # –ñ–¥–µ–º –¥–æ 00:00
                    if time_until_midnight > 0:
                        await asyncio.sleep(time_until_midnight)

                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å
                    await self.reset_database()
                    self.last_reset_date = current_date

                    # –ñ–¥–µ–º 24 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    await asyncio.sleep(86400)
                else:
                    # –ñ–¥–µ–º 1 —á–∞—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    await asyncio.sleep(3600)
                    
            except Exception as e:
                logging.error(f"Error in schedule_reset: {e}")
                await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    async def reset_database(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∑–∞–ø–∏—Å–µ–π –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞"""
        conn = None
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            cursor.execute("SELECT COUNT(*) FROM appointments")
            count = cursor.fetchone()[0]

            if count > 0:
                cursor.execute("DELETE FROM appointments")
                conn.commit()
                logging.info(f"Cleared {count} appointments from database")

                if self.bot and ADMIN_ID:
                    try:
                        await self.bot.send_message(
                            chat_id=ADMIN_ID,
                            text=f"üîÑ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π"
                        )
                    except Exception as e:
                        logging.error(f"Notification error: {e}")
            else:
                logging.info("No appointments to clear - database was empty")

        except Exception as e:
            logging.error(f"Error resetting database: {e}")
            if self.bot and ADMIN_ID:
                await self.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã: {str(e)}"
                )
        finally:
            if conn:
                conn.close()

    def is_day_available(self, day_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–Ω—è –¥–ª—è –∑–∞–ø–∏—Å–∏"""
        try:
            today = datetime.now().weekday()

            # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —Å—É–±–±–æ—Ç–∞ (5) –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (6) - –≤—Å–µ –¥–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if today >= 5:
                return True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–Ω—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
            if day_name not in self.day_map:
                return False

            return self.day_map[day_name] >= today

        except Exception as e:
            logging.error(f"Error in is_day_available: {e}")
            return False

    def get_current_weekday(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        return days[datetime.now().weekday()]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
week_manager = WeekManager()
